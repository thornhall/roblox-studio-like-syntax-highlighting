import * as vscode from 'vscode';

const GAME_SERVICES = [
    "Players",
    "Workspace",
    "TweenService",
    "UserInputService",
    "ReplicatedStorage",
    "RunService",
    "HttpService",
    "MarketplaceService",
    "DataStoreService",
    "TeleportService",
    "PathfindingService",
    "Debris",
    "SoundService",
    "BadgeService",
    "AnalyticsService",
    "Chat",
    "Stats",
    "AdService",
    "AssetService",
    "AssetDeliveryProxy",
    "AvatarEditorService",
    "AnimationClipProvider",
    "AnimationFromVideoCreatorService",
    "AvatarCreationService",
    "BadgeService",
    "BrowserService",
    "ContextActionService",
    "DebugSettings",
    "ExperienceNotificationService",
    "FriendServic",
    "FlagStandService",
    "FeatureRestrictionManager",
    "Geometry",
    "GuiService",
    "GameSettings",
    "GroupService",
    "GamepadService",
    "GamePassService",
    "GeometryService",
    "GenerationService",
    "GuidRegistryService",
    "GoogleAnalyticsConfiguration",
    "GenericChallengeService",
    "HttpService",
    "Hopper",
    "HapticService",
    "HttpRbxApiService",
    "HeapProfilerService",
    "HSRDataContentProvider",
    "HeightmapImporterService",
    "InsertService",
    "ILegacyStudioBridge",
    "IncrementalPatchBuilder",
    "JointsService",
    "KeyboardService",
    "KeyframeSequenceProvider",
    "LogService",
    "LuaSettings",
    "Lighting",
    "LoginService",
    "LuaWebService",
    "LanguageService",
    "LocalizationService",
    "MaterialService",
    "MessagingService",
    "MemStorageService",
    "MarketplaceService",
    "MatchmakingService",
    "MemStorageService",
    "MemoryStoreService",
    "MeshContentProvider",
    "NetworkClient",
    "NetworkServer",
    "NetworkSettings",
    "NotificationService",
    "OpenCloudService",
    "PlacesService",
    "PointsService",
    "PolicyService",
    "PackageService",
    "PhysicsService",
    "PublishService",
    "PhysicsSettings",
    "PlayerDataService",
    "PermissionsService",
    "ProximityPromptService",
    "PlayerViewService",
    "ProcessInstancePhysicsService",
    "PluginManagementService",
    "PatchBundlerFileWatch",
    "RenderSettings",
    "ReplicatedFirst",
    "RemoteDebuggerServer",
    "Stats",
    "Studio",
    "Selection",
    "StarterGui",
    "StarterPack",
    "SoundService",
    "ScriptContext",
    "ScriptService",
    "SocialService",
    "StarterPlayer",
    "SpawnerService",
    "StylingService",
    "StopWatchReporter",
    "ServerScriptService",
    "SharedTableRegistry",
    "ScriptProfilerService",
    "StartupMessageService",
    "ServiceVisibilityService",
    "ShorelineUpgraderService",
    "SelectionHighlightManager",
    "SolidModelContentProvider",
    "SmoothVoxelsUpgraderService",
    "Teams",
    "TestService",
    "TextService",
    "TimerService",
    "TaskScheduler",
    "TextBoxService",
    "TextChatService",
    "TouchInputService",
    "UserService",
    "UserGameSettings",
    "UserInputService",
    "UGCValidationService",
    "UIDragDetectorService",
    "Visit",
    "VRService",
    "VirtualUser",
    "VideoService",
    "VRStatusService",
    "VoiceChatService",
    "VoiceChatInternal",
    "VideoCaptureService",
    "VirtualInputManager",
    "VisualizationModeService",
    "VisibilityCheckDispatcher",
];

export class GetServiceCompletionProvider implements vscode.CompletionItemProvider {
    provideCompletionItems(
        document: vscode.TextDocument,
        position: vscode.Position,
        token: vscode.CancellationToken,
        context: vscode.CompletionContext
    ): vscode.ProviderResult<vscode.CompletionItem[]> {
        const lineText = document.lineAt(position).text;

        console.log("Here2")
        // Regex to check if we're inside game:GetService("...")
        const match = lineText.match(/game\s*:\s*GetService\s*\(\s*"?"?'?'?\)?$/);
        if (!match) {
            return [];
        }
        console.log("Here1")

        // Generate completion items for game services
        return GAME_SERVICES.map(service => {
            const item = new vscode.CompletionItem(
                `"${service}"`,
                vscode.CompletionItemKind.EnumMember
            );
            item.insertText = `${service}`;
            item.documentation = new vscode.MarkdownString(`**game:GetService("${service}")**`);
            return item;
        });
    }
}